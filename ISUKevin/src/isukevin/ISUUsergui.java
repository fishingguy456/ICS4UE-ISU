/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package isukevin;

import static isukevin.ISUgui.lureCatalogue;
import static isukevin.ISUgui.reelCatalogue;
import static isukevin.ISUgui.rodCatalogue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author 335726246
 */
public class ISUUsergui extends javax.swing.JFrame {

    /**
     * Creates new form ISUUsergui
     */
    public ISUUsergui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgType = new javax.swing.ButtonGroup();
        btgSearch = new javax.swing.ButtonGroup();
        dlgConfirm = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnYes = new javax.swing.JButton();
        btnNo = new javax.swing.JButton();
        dlgDetails = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        lblProduct = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblSpecs = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblSku = new javax.swing.JLabel();
        btnDetailsDone = new javax.swing.JButton();
        pnlEverything = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstItems = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        radBrand = new javax.swing.JRadioButton();
        radModel = new javax.swing.JRadioButton();
        radPrice = new javax.swing.JRadioButton();
        radLure = new javax.swing.JRadioButton();
        radReel = new javax.swing.JRadioButton();
        radRod = new javax.swing.JRadioButton();
        btnSearchCategory = new javax.swing.JButton();
        txtSearchField = new javax.swing.JTextField();
        btnSearchProduct = new javax.swing.JButton();
        btnPurchase = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCart = new javax.swing.JList();
        btnLogout = new javax.swing.JButton();
        lblError = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        btnShowAll = new javax.swing.JButton();

        dlgConfirm.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dlgConfirm.setMinimumSize(new java.awt.Dimension(400, 300));
        dlgConfirm.setModal(true);
        dlgConfirm.setResizable(false);

        jLabel5.setText("Are you sure that you would like to remove the item?");

        btnYes.setText("Yes");
        btnYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYesActionPerformed(evt);
            }
        });

        btnNo.setText("No");
        btnNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btnYes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNo))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel5)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel5)
                .addGap(87, 87, 87)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnYes)
                    .addComponent(btnNo))
                .addContainerGap(127, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dlgConfirmLayout = new javax.swing.GroupLayout(dlgConfirm.getContentPane());
        dlgConfirm.getContentPane().setLayout(dlgConfirmLayout);
        dlgConfirmLayout.setHorizontalGroup(
            dlgConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dlgConfirmLayout.setVerticalGroup(
            dlgConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        dlgDetails.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dlgDetails.setMinimumSize(new java.awt.Dimension(850, 220));
        dlgDetails.setModal(true);
        dlgDetails.setResizable(false);

        jLabel6.setText("Product:");

        jLabel7.setText("Specifications:");

        jLabel8.setText("Price:");

        lblPrice.setToolTipText("");

        jLabel9.setText("SKU:");

        btnDetailsDone.setText("Done");
        btnDetailsDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgDetailsLayout = new javax.swing.GroupLayout(dlgDetails.getContentPane());
        dlgDetails.getContentPane().setLayout(dlgDetailsLayout);
        dlgDetailsLayout.setHorizontalGroup(
            dlgDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9))
                .addGap(33, 33, 33)
                .addGroup(dlgDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSpecs, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(dlgDetailsLayout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(btnDetailsDone)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        dlgDetailsLayout.setVerticalGroup(
            dlgDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgDetailsLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(dlgDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dlgDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSpecs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(dlgDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dlgDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(btnDetailsDone)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lstItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstItemsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstItems);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Welcome to Kevin's Fishing Depot!");

        jLabel1.setText("What would you like to search by?");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("What are you looking for?");

        radBrand.setText("Brand");

        radModel.setText("Product");

        radPrice.setText("Maximum Price");
        radPrice.setToolTipText("");

        radLure.setText("Fishing Lures");

        radReel.setText("Fishing Reels");

        radRod.setText("Fishing Rods");

        btnSearchCategory.setText("Search All Selected Product Types");
        btnSearchCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCategoryActionPerformed(evt);
            }
        });

        btnSearchProduct.setText("Search");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });

        btnPurchase.setText("Add Item to cart");
        btnPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurchaseActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Your Cart:");

        jScrollPane1.setViewportView(lstCart);

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove Item From Cart");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnShowAll.setText("Show All Products");
        btnShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEverythingLayout = new javax.swing.GroupLayout(pnlEverything);
        pnlEverything.setLayout(pnlEverythingLayout);
        pnlEverythingLayout.setHorizontalGroup(
            pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEverythingLayout.createSequentialGroup()
                .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEverythingLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(radLure)
                            .addComponent(radReel)
                            .addComponent(radRod)
                            .addComponent(btnSearchCategory))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                        .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlEverythingLayout.createSequentialGroup()
                        .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEverythingLayout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(jLabel2))
                            .addGroup(pnlEverythingLayout.createSequentialGroup()
                                .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(pnlEverythingLayout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(radBrand)
                                            .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(pnlEverythingLayout.createSequentialGroup()
                                                    .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(btnSearchProduct)))
                                            .addGroup(pnlEverythingLayout.createSequentialGroup()
                                                .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(radPrice)
                                                    .addComponent(radModel))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(47, 47, 47)
                                .addComponent(btnRemove)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(pnlEverythingLayout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(btnPurchase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnShowAll)
                .addGap(213, 213, 213)
                .addComponent(btnLogout)
                .addGap(230, 230, 230))
        );
        pnlEverythingLayout.setVerticalGroup(
            pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEverythingLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(5, 5, 5)
                .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radLure)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlEverythingLayout.createSequentialGroup()
                        .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEverythingLayout.createSequentialGroup()
                                .addComponent(radReel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radRod)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearchCategory)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radBrand)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radModel))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radPrice)
                            .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlEverythingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPurchase)
                    .addComponent(btnLogout)
                    .addComponent(btnShowAll))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlEverything, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlEverything, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    static ArrayList<String> cart = new ArrayList<>();//the user's cart
    static ArrayList<String> currList[] = new ArrayList[7];//array of arraylists to store the items
    private void btnSearchCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCategoryActionPerformed
        // TODO add your handling code here:
        if (radLure.isSelected()) {
            //display lures, only display important info, can show all info if clicked on
            displayLures(lureCatalogue);//display lures if the radio button is selected
        } else if (radReel.isSelected()) {
            //display reels
            displayReels(reelCatalogue);
        } else if (radRod.isSelected()) {
            //display reels
            displayRods(rodCatalogue);
        }
    }//GEN-LAST:event_btnSearchCategoryActionPerformed

    private void btnPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseActionPerformed
        // TODO add your handling code here:
        //dialog box to say are you sure that you would like to add this item to your cart
        String purchase = (String) lstItems.getSelectedValue();//which item is selected
        int idx = lstItems.getSelectedIndex();//index of seleted item
        if (idx != -1) {//if there is nothing selected
            cart.add(purchase);//add the purchased item into the cart
            Object arr[] = cart.toArray();
            lstCart.setListData(arr);//set JList
        }
    }//GEN-LAST:event_btnPurchaseActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        try {
            ISUgui HomeGui = new ISUgui();//logout to home page
            dispose();
            HomeGui.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(ISUUsergui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        btgType.add(radLure);
        btgType.add(radReel);
        btgType.add(radRod);
        btgSearch.add(radBrand);
        btgSearch.add(radModel);
        btgSearch.add(radPrice);//add radio buttons to button group
        currList[0] = new ArrayList<>();
        currList[1] = new ArrayList<>();
        currList[2] = new ArrayList<>();
        currList[3] = new ArrayList<>();
        currList[4] = new ArrayList<>();
        currList[5] = new ArrayList<>();
        currList[6] = new ArrayList<>();//initialize arraylists
    }//GEN-LAST:event_formWindowOpened

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        // TODO add your handling code here:
        String search = txtSearchField.getText();//what is being searched
        lblError.setText("");
        if (!radRod.isSelected() && !radReel.isSelected() && !radLure.isSelected()) {
            lblError.setText("Please select what type of item you would like to search for");
        }//prompt if they are missing a button
        if (search.equals("")) {
            if (radRod.isSelected() && radBrand.isSelected()) {
                sortByBrandAsc();
                displayRods(rodCatalogue);//display the rods if rods are selected
            } else if (radReel.isSelected() && radBrand.isSelected()) {
                sortByBrandAsc();
                displayReels(reelCatalogue);//reels if reels are selected
            } else if (radLure.isSelected() && radBrand.isSelected()) {
                sortByBrandAsc();
                displayLures(lureCatalogue);//lures is lures are selected
            } else if (radRod.isSelected() && radModel.isSelected()) {
                sortByModelAsc();
                displayRods(rodCatalogue);//display the rods if rods are selected
            } else if (radReel.isSelected() && radModel.isSelected()) {
                sortByModelAsc();
                displayReels(reelCatalogue);//reels if reels are selected
            } else if (radLure.isSelected() && radModel.isSelected()) {
                sortByModelAsc();
                displayLures(lureCatalogue);//lures is lures are selected
            } else if (radRod.isSelected() && radPrice.isSelected()) {
                sortByPriceAsc();
                displayRods(rodCatalogue);//display the rods if rods are selected
            } else if (radReel.isSelected() && radPrice.isSelected()) {
                sortByPriceAsc();
                displayReels(reelCatalogue);//reels if reels are selected
            } else if (radLure.isSelected() && radPrice.isSelected()) {
                sortByPriceAsc();
                displayLures(lureCatalogue);//lures is lures are selected
            }
        } else if (radBrand.isSelected() && radRod.isSelected()) {//1 and 5
            //search in the jlist
            sortByBrandAsc();//sort by brand for binary search
            int n = bSearchRodBrand(search);//binary search the rods by brand
            int left = n;
            int right = n;//look for leftmost and rightmost product, display all of them
            if (n == -1) {
                lblError.setText("That product does not exist");
                lstItems.setListData(new Object[0]);//does not exists
            } else {
                lblError.setText("");
                for (int i = n; i >= 0; i--) {
                    if (rodCatalogue.get(i).getBrand().equals(search)) {//find the left most linearly
                        left = i;
                    }
                }
                for (int i = n; i < rodCatalogue.size(); i++) {
                    if (rodCatalogue.get(i).getBrand().equals(search)) {//find the right most linearly
                        right = i;
                    }
                }
                Object newList[] = new Object[right - left + 1];
                for (int i = 0; i < 7; i++) {
                    currList[i].clear();//clear the current list to make room for the new items
                }
                for (int i = left - left; i <= right - left; i++) {
                    rod current = rodCatalogue.get(i + left);
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String action = current.getAction();
                    String weight = current.getWeight();
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();//things to display
                    currList[0].add(brand);
                    currList[1].add(model);
                    currList[2].add(action);
                    currList[3].add(weight);
                    currList[4].add(type);
                    currList[5].add(price);
                    currList[6].add(sku);//current items in list
                    newList[i] = brand + ", " + model + ", " + price;//display
                }
                lstItems.setListData(newList);
            }
        } else if (radBrand.isSelected() && radReel.isSelected()) {
            /*
            Similar code to above
            */
            sortByBrandAsc();
            int n = bSearchReelBrand(search);
            int left = n;
            int right = n;
            if (n == -1) {
                lblError.setText("That product does not exist");
                lstItems.setListData(new Object[0]);
            } else {
                lblError.setText("");
                for (int i = n; i >= 0; i--) {
                    if (reelCatalogue.get(i).getBrand().equals(search)) {
                        left = i;
                    }
                }
                for (int i = n; i < reelCatalogue.size(); i++) {
                    if (reelCatalogue.get(i).getBrand().equals(search)) {
                        right = i;
                    }
                }
                Object newList[] = new Object[right - left + 1];
                for (int i = 0; i < 7; i++) {
                    currList[i].clear();
                }
                for (int i = left - left; i <= right - left; i++) {
                    reel current = reelCatalogue.get(i + left);
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String retrieve = current.getRetrieve();
                    String ratio = Double.toString(current.getGearRatio()) + ":1";
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();
                    currList[0].add(brand);
                    currList[1].add(model);
                    currList[2].add(retrieve);
                    currList[3].add(ratio);
                    currList[4].add(type);
                    currList[5].add(price);
                    currList[6].add(sku);
                    newList[i] = brand + ", " + model + ", " + price;
                }
                lstItems.setListData(newList);
            }
        } else if (radBrand.isSelected() && radLure.isSelected()) {
            /*
            similar code to above
            */
            sortByBrandAsc();
            int n = bSearchLureBrand(search);
            int left = n;
            int right = n;
            if (n == -1) {
                lblError.setText("That product does not exist");
                lstItems.setListData(new Object[0]);
            } else {
                lblError.setText("");
                for (int i = n; i >= 0; i--) {
                    if (lureCatalogue.get(i).getBrand().equals(search)) {
                        left = i;
                    }
                }
                for (int i = n; i < lureCatalogue.size(); i++) {
                    if (lureCatalogue.get(i).getBrand().equals(search)) {
                        right = i;
                    }
                }
                Object newList[] = new Object[right - left + 1];
                for (int i = 0; i < 7; i++) {
                    currList[i].clear();
                }
                for (int i = left - left; i <= right - left; i++) {
                    lure current = lureCatalogue.get(i + left);
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String colour = current.getColour();
                    String size = Double.toString(current.getSize());
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();
                    currList[0].add(brand);
                    currList[1].add(model);
                    currList[2].add(colour);
                    currList[3].add(size);
                    currList[4].add(type);
                    currList[5].add(price);
                    currList[6].add(sku);
                    newList[i] = brand + ", " + model + ", " + price;
                }
                lstItems.setListData(newList);
            }
        } else if (radModel.isSelected() && radRod.isSelected()) {
            /*
            similar to above
            */
            sortByModelAsc();
            int n = bSearchRodModel(search);
            int left = n;
            int right = n;
            if (n == -1) {
                lblError.setText("That product does not exist");
                lstItems.setListData(new Object[0]);
            } else {
                lblError.setText("");
                for (int i = n; i >= 0; i--) {
                    if (rodCatalogue.get(i).getModel().equals(search)) {
                        left = i;
                    }
                }
                for (int i = n; i < rodCatalogue.size(); i++) {
                    if (rodCatalogue.get(i).getModel().equals(search)) {
                        right = i;
                    }
                }
                Object newList[] = new Object[right - left + 1];
                for (int i = 0; i < 7; i++) {
                    currList[i].clear();
                }
                for (int i = left - left; i <= right - left; i++) {
                    rod current = rodCatalogue.get(i + right);
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String action = current.getAction();
                    String weight = current.getWeight();
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();
                    currList[0].add(brand);
                    currList[1].add(model);
                    currList[2].add(action);
                    currList[3].add(weight);
                    currList[4].add(type);
                    currList[5].add(price);
                    currList[6].add(sku);
                    newList[i] = brand + ", " + model + ", " + price;
                }
                lstItems.setListData(newList);
            }
        } else if (radModel.isSelected() && radReel.isSelected()) {
            /*
            similar to above
            */
            sortByModelAsc();
            int n = bSearchReelModel(search);
            int left = n;
            int right = n;
            if (n == -1) {
                lblError.setText("That product does not exist");
                lstItems.setListData(new Object[0]);
            } else {
                lblError.setText("");
                for (int i = n; i >= 0; i--) {
                    if (reelCatalogue.get(i).getModel().equals(search)) {
                        left = i;
                    }
                }
                for (int i = n; i < reelCatalogue.size(); i++) {
                    if (reelCatalogue.get(i).getModel().equals(search)) {
                        right = i;
                    }
                }
                Object newList[] = new Object[right - left + 1];
                for (int i = 0; i < 7; i++) {
                    currList[i].clear();
                }
                for (int i = left - left; i <= right - left; i++) {
                    reel current = reelCatalogue.get(i + left);
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String retrieve = current.getRetrieve();
                    String ratio = Double.toString(current.getGearRatio()) + ":1";
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();
                    currList[0].add(brand);
                    currList[1].add(model);
                    currList[2].add(retrieve);
                    currList[3].add(ratio);
                    currList[4].add(type);
                    currList[5].add(price);
                    currList[6].add(sku);
                    newList[i] = brand + ", " + model + ", " + price;
                }
                lstItems.setListData(newList);
            }
        } else if (radModel.isSelected() && radLure.isSelected()) {
            /*
            similar to above
            */
            sortByModelAsc();
            int n = bSearchLureModel(search);
            int left = n;
            int right = n;
            if (n == -1) {
                lblError.setText("That product does not exist");
                lstItems.setListData(new Object[0]);
            } else {
                lblError.setText("");
                for (int i = n; i >= 0; i--) {
                    if (lureCatalogue.get(i).getModel().equals(search)) {
                        left = i;
                    }
                }
                for (int i = n; i < lureCatalogue.size(); i++) {
                    if (lureCatalogue.get(i).getModel().equals(search)) {
                        right = i;
                    }
                }
                Object newList[] = new Object[right - left + 1];
                for (int i = 0; i < 7; i++) {
                    currList[i].clear();
                }
                for (int i = left - left; i <= right - left; i++) {
                    lure current = lureCatalogue.get(i + left);
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String colour = current.getColour();
                    String size = Double.toString(current.getSize());
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();
                    currList[0].add(brand);
                    currList[1].add(model);
                    currList[2].add(colour);
                    currList[3].add(size);
                    currList[4].add(type);
                    currList[5].add(price);
                    currList[6].add(sku);
                    newList[i] = brand + ", " + model + ", " + price;
                }
                lstItems.setListData(newList);
            }
        } else if (radPrice.isSelected() && radRod.isSelected()) {
            /*
            similar to above
            */
            if (!isNumeric(search)) {
                lblError.setText("Please enter a valid number");
            } else {
                sortByPriceAsc();
                int n = bSearchRodPrice(Double.parseDouble(search));
                if (n == -1) {
                    lblError.setText("No products are below that price");
                    lstItems.setListData(new Object[0]);
                } else {
                    lblError.setText("");
                    Object newList[] = new Object[n + 1];
                    for (int i = 0; i <= n; i++) {
                        rod current = rodCatalogue.get(i);
                        String brand = current.getBrand();
                        String model = current.getModel();//action weight type price
                        String action = current.getAction();
                        String weight = current.getWeight();
                        String type = current.getType();
                        String price = "$" + Double.toString(current.getPrice());
                        String sku = current.getSku();
                        currList[0].add(brand);
                        currList[1].add(model);
                        currList[2].add(action);
                        currList[3].add(weight);
                        currList[4].add(type);
                        currList[5].add(price);
                        currList[6].add(sku);
                        newList[i] = brand + ", " + model + ", " + price;
                    }
                    lstItems.setListData(newList);
                }
            }
        } else if (radPrice.isSelected() && radReel.isSelected()) {
            /*
            similar to above
            */
            if (!isNumeric(search)) {
                lblError.setText("Please enter a valid number");
            } else {
                sortByPriceAsc();
                int n = bSearchReelPrice(Double.parseDouble(search));
                if (n == -1) {
                    lblError.setText("No products are below that price");
                    lstItems.setListData(new Object[0]);
                } else {
                    Object newList[] = new Object[n + 1];
                    for (int i = 0; i < 7; i++) {
                        currList[i].clear();
                    }
                    for (int i = 0; i <= n; i++) {
                        reel current = reelCatalogue.get(i);
                        String brand = current.getBrand();
                        String model = current.getModel();//action weight type price
                        String retrieve = current.getRetrieve();
                        String ratio = Double.toString(current.getGearRatio()) + ":1";
                        String type = current.getType();
                        String price = "$" + Double.toString(current.getPrice());
                        String sku = current.getSku();
                        currList[0].add(brand);
                        currList[1].add(model);
                        currList[2].add(retrieve);
                        currList[3].add(ratio);
                        currList[4].add(type);
                        currList[5].add(price);
                        currList[6].add(sku);
                        newList[i] = brand + ", " + model + ", " + price;
                    }
                    lstItems.setListData(newList);
                }
            }
        } else if (radPrice.isSelected() && radLure.isSelected()) {
            /*
            similar to above
            */
            if (!isNumeric(search)) {
                lblError.setText("Please enter a valid number");
            } else {
                sortByPriceAsc();
                int n = bSearchLurePrice(Double.parseDouble(search));
                if (n == -1) {
                    lblError.setText("No products are below that price");
                    lstItems.setListData(new Object[0]);
                } else {
                    Object newList[] = new Object[n + 1];
                    for (int i = 0; i < 7; i++) {
                        currList[i].clear();
                    }
                    for (int i = 0; i <= n; i++) {
                        lure current = lureCatalogue.get(i);
                        String brand = current.getBrand();
                        String model = current.getModel();//action weight type price
                        String colour = current.getColour();
                        String size = Double.toString(current.getSize());
                        String type = current.getType();
                        String price = "$" + Double.toString(current.getPrice());
                        String sku = current.getSku();
                        currList[0].add(brand);
                        currList[1].add(model);
                        currList[2].add(colour);
                        currList[3].add(size);
                        currList[4].add(type);
                        currList[5].add(price);
                        currList[6].add(sku);
                        newList[i] = brand + ", " + model + ", " + price;
                    }
                    lstItems.setListData(newList);
                }
            }
        }
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        if (lstCart.getSelectedIndex() != -1) {
            dlgConfirm.setVisible(true);//as long as a proper item is selected
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYesActionPerformed
        // TODO add your handling code here:
        int index = lstCart.getSelectedIndex();
        cart.remove(index);//remove the item from the cart
        Object newCart[] = cart.toArray();
        lstCart.setListData(newCart);//reset the JList
        dlgConfirm.setVisible(false);//close the dialog
    }//GEN-LAST:event_btnYesActionPerformed

    private void btnNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoActionPerformed
        // TODO add your handling code here:
        dlgConfirm.setVisible(false);//close the dialog
    }//GEN-LAST:event_btnNoActionPerformed

    private void lstItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstItemsMouseClicked
        // TODO add your handling code here:
        int theRow = lstItems.getSelectedIndex();
        if (theRow != -1 && evt.getClickCount() == 2) {//double click to view
            lblProduct.setText(currList[0].get(theRow) + ", " + currList[1].get(theRow));
            lblSpecs.setText(currList[2].get(theRow) + ", " + currList[3].get(theRow) + ", " + currList[4].get(theRow));
            lblPrice.setText(currList[5].get(theRow));
            lblSku.setText(currList[6].get(theRow));//display everything in the dialog
            dlgDetails.setVisible(true);//show the dialog
        }
    }//GEN-LAST:event_lstItemsMouseClicked

    private void btnShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllActionPerformed
        // TODO add your handling code here:
        btgType.clearSelection();
        btgSearch.clearSelection();//clear all radio buttons
        sortByBrandAsc();
        ArrayList<String> items = new ArrayList<>();
        for (int i = 0; i < 7; i++) {
            currList[i].clear();//clear current list
        }
        for (int i = 0; i < rodCatalogue.size(); i++) {//910-961: display all rods, reels, and lures
            rod current = rodCatalogue.get(i);
            String brand = current.getBrand();
            String model = current.getModel();//action weight type price
            String action = current.getAction();
            String weight = current.getWeight();
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + price);
            currList[0].add(brand);
            currList[1].add(model);
            currList[2].add(action);
            currList[3].add(weight);
            currList[4].add(type);
            currList[5].add(price);
            currList[6].add(sku);//these items are currently in the list
        }
        for (reel current : reelCatalogue) {
            /*
            similar code to above
            */
            String brand = current.getBrand();
            String model = current.getModel();//action weight type price
            String retrieve = current.getRetrieve();
            String ratio = Double.toString(current.getGearRatio()) + ":1";
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + price);
            currList[0].add(brand);
            currList[1].add(model);
            currList[2].add(retrieve);
            currList[3].add(ratio);
            currList[4].add(type);
            currList[5].add(price);
            currList[6].add(sku);
        }
        for (lure current : lureCatalogue) {
            /*
            similar code to above
            */
            String brand = current.getBrand();
            String model = current.getModel();
            String colour = current.getColour();
            String size = Double.toString(current.getSize());
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + price);
            currList[0].add(brand);
            currList[1].add(model);
            currList[2].add(colour);
            currList[3].add(size);
            currList[4].add(type);
            currList[5].add(price);
            currList[6].add(sku);
        }
        Object[] arr = items.toArray();
        lstItems.setListData(arr);//show everything in JList
    }//GEN-LAST:event_btnShowAllActionPerformed

    private void btnDetailsDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsDoneActionPerformed
        // TODO add your handling code here:
        dlgDetails.setVisible(false);//close the dialog
    }//GEN-LAST:event_btnDetailsDoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ISUUsergui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ISUUsergui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ISUUsergui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ISUUsergui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ISUUsergui().setVisible(true);
            }
        });
    }
    /**
     * Determines if a string is numeric
     * 
     * @param str the string to look at
     * @return whether it is numeric or not
     */
    public static boolean isNumeric(String str) {
        int periods = 0;
        for (char c : str.toCharArray()) {//look at individual characters
            if (c == '.') {
                periods++;//there was a period
            }
            if (!Character.isDigit(c) && c != '.') {//not a digit or a period
                return false;//not numeric
            }
            if (c == '.' && periods > 1) {//too many periods
                return false;//not numeric
            }
        }
        return true;
    }
    
    /**
     * Sort rods, reels and lures by model/product name in ascending order
     */
    public static void sortByModelAsc() {//bubble sort each field and type by model
        /*
        bubble sort algorithm
        */
        for (int i = 0; i < rodCatalogue.size() - 1; i++) {//loop through to the end
            for (int j = 0; j < rodCatalogue.size() - i - 1; j++) {//loop along with i, comparing adjacent cells
                if (rodCatalogue.get(j).getModel().compareTo(rodCatalogue.get(j + 1).getModel()) > 0) {//if they are out of order
                    rod temp = rodCatalogue.get(j);//temporary value to remember
                    rodCatalogue.set(j, rodCatalogue.get(j + 1));
                    rodCatalogue.set(j + 1, temp);//swap them
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < reelCatalogue.size() - 1; i++) {
            for (int j = 0; j < reelCatalogue.size() - i - 1; j++) {
                if (reelCatalogue.get(j).getModel().compareTo(reelCatalogue.get(j + 1).getModel()) > 0) {
                    reel temp = reelCatalogue.get(j);
                    reelCatalogue.set(j, reelCatalogue.get(j + 1));
                    reelCatalogue.set(j + 1, temp);
                }
            }
        }
        for (int i = 0; i < lureCatalogue.size() - 1; i++) {
            for (int j = 0; j < lureCatalogue.size() - i - 1; j++) {
                if (lureCatalogue.get(j).getModel().compareTo(lureCatalogue.get(j + 1).getModel()) > 0) {
                    lure temp = lureCatalogue.get(j);
                    lureCatalogue.set(j, lureCatalogue.get(j + 1));
                    lureCatalogue.set(j + 1, temp);
                }
            }
        }
    }

    /**
     * Sort rods, reels and lures by model/product name in descending order
     */
    public static void sortByModelDes() {//bubble sort each field and type by model
        /*
        bubble sort algorithm
        */
        for (int i = 0; i < rodCatalogue.size() - 1; i++) {//loop through to the end
            for (int j = 0; j < rodCatalogue.size() - i - 1; j++) {//loop along with i, comparing adjacent cells
                if (rodCatalogue.get(j).getModel().compareTo(rodCatalogue.get(j + 1).getModel()) < 0) {//if they are out of order
                    rod temp = rodCatalogue.get(j);//temporary value to remember
                    rodCatalogue.set(j, rodCatalogue.get(j + 1));
                    rodCatalogue.set(j + 1, temp);//swap them
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < reelCatalogue.size() - 1; i++) {
            for (int j = 0; j < reelCatalogue.size() - i - 1; j++) {
                if (reelCatalogue.get(j).getModel().compareTo(reelCatalogue.get(j + 1).getModel()) < 0) {
                    reel temp = reelCatalogue.get(j);
                    reelCatalogue.set(j, reelCatalogue.get(j + 1));
                    reelCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < lureCatalogue.size() - 1; i++) {
            for (int j = 0; j < lureCatalogue.size() - i - 1; j++) {
                if (lureCatalogue.get(j).getModel().compareTo(lureCatalogue.get(j + 1).getModel()) < 0) {
                    lure temp = lureCatalogue.get(j);
                    lureCatalogue.set(j, lureCatalogue.get(j + 1));
                    lureCatalogue.set(j + 1, temp);
                }
            }
        }
    }
    
    /**
     * Sort rods, reels and lures by price in ascending order
     */
    public static void sortByPriceAsc() {//bubble sort each field and type by price
        /*
        bubble sort algorithm
        */
        for (int i = 0; i < rodCatalogue.size() - 1; i++) {
            for (int j = 0; j < rodCatalogue.size() - i - 1; j++) {
                if (rodCatalogue.get(j).getPrice() > rodCatalogue.get(j + 1).getPrice()) {
                    rod temp = rodCatalogue.get(j);
                    rodCatalogue.set(j, rodCatalogue.get(j + 1));
                    rodCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < reelCatalogue.size() - 1; i++) {
            for (int j = 0; j < reelCatalogue.size() - i - 1; j++) {
                if (reelCatalogue.get(j).getPrice() > reelCatalogue.get(j + 1).getPrice()) {
                    reel temp = reelCatalogue.get(j);
                    reelCatalogue.set(j, reelCatalogue.get(j + 1));
                    reelCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < lureCatalogue.size() - 1; i++) {
            for (int j = 0; j < lureCatalogue.size() - i - 1; j++) {
                if (lureCatalogue.get(j).getPrice() > lureCatalogue.get(j + 1).getPrice()) {
                    lure temp = lureCatalogue.get(j);
                    lureCatalogue.set(j, lureCatalogue.get(j + 1));
                    lureCatalogue.set(j + 1, temp);
                }
            }
        }
    }

    
    /**
     * Sort rods, reels and lures by price in descending order
     */
    public static void sortByPriceDes() {//bubble sort each field and type by price
        /*
        bubble sort algorithm
        */
        for (int i = 0; i < rodCatalogue.size() - 1; i++) {
            for (int j = 0; j < rodCatalogue.size() - i - 1; j++) {
                if (rodCatalogue.get(j).getPrice() < rodCatalogue.get(j + 1).getPrice()) {
                    rod temp = rodCatalogue.get(j);
                    rodCatalogue.set(j, rodCatalogue.get(j + 1));
                    rodCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < reelCatalogue.size() - 1; i++) {
            for (int j = 0; j < reelCatalogue.size() - i - 1; j++) {
                if (reelCatalogue.get(j).getPrice() < reelCatalogue.get(j + 1).getPrice()) {
                    reel temp = reelCatalogue.get(j);
                    reelCatalogue.set(j, reelCatalogue.get(j + 1));
                    reelCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < lureCatalogue.size() - 1; i++) {
            for (int j = 0; j < lureCatalogue.size() - i - 1; j++) {
                if (lureCatalogue.get(j).getPrice() < lureCatalogue.get(j + 1).getPrice()) {
                    lure temp = lureCatalogue.get(j);
                    lureCatalogue.set(j, lureCatalogue.get(j + 1));
                    lureCatalogue.set(j + 1, temp);
                }
            }
        }
    }
    
    /**
     * Sort rods, reels and lures by brand in ascending order
     */
    public static void sortByBrandAsc() {//bubble sort each field and type by brand
        /*
        bubble sort algorithm
        */
        for (int i = 0; i < rodCatalogue.size() - 1; i++) {
            for (int j = 0; j < rodCatalogue.size() - i - 1; j++) {
                if (rodCatalogue.get(j).getBrand().compareTo(rodCatalogue.get(j + 1).getBrand()) > 0) {
                    rod temp = rodCatalogue.get(j);
                    rodCatalogue.set(j, rodCatalogue.get(j + 1));
                    rodCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < reelCatalogue.size() - 1; i++) {
            for (int j = 0; j < reelCatalogue.size() - i - 1; j++) {
                if (reelCatalogue.get(j).getBrand().compareTo(reelCatalogue.get(j + 1).getBrand()) > 0) {
                    reel temp = reelCatalogue.get(j);
                    reelCatalogue.set(j, reelCatalogue.get(j + 1));
                    reelCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < lureCatalogue.size() - 1; i++) {
            for (int j = 0; j < lureCatalogue.size() - i - 1; j++) {
                if (lureCatalogue.get(j).getBrand().compareTo(lureCatalogue.get(j + 1).getBrand()) > 0) {
                    lure temp = lureCatalogue.get(j);
                    lureCatalogue.set(j, lureCatalogue.get(j + 1));
                    lureCatalogue.set(j + 1, temp);
                }
            }
        }
    }

    
    /**
     * Sort rods, reels and lures by brand in descending order
     */
    public static void sortByBrandDes() {//bubble sort each field and type by brand
        /*
        bubble sort algorithm
        */
        for (int i = 0; i < rodCatalogue.size() - 1; i++) {
            for (int j = 0; j < rodCatalogue.size() - i - 1; j++) {
                if (rodCatalogue.get(j).getBrand().compareTo(rodCatalogue.get(j + 1).getBrand()) < 0) {
                    rod temp = rodCatalogue.get(j);
                    rodCatalogue.set(j, rodCatalogue.get(j + 1));
                    rodCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < reelCatalogue.size() - 1; i++) {
            for (int j = 0; j < reelCatalogue.size() - i - 1; j++) {
                if (reelCatalogue.get(j).getBrand().compareTo(reelCatalogue.get(j + 1).getBrand()) < 0) {
                    reel temp = reelCatalogue.get(j);
                    reelCatalogue.set(j, reelCatalogue.get(j + 1));
                    reelCatalogue.set(j + 1, temp);
                }
            }
        }
        /*
        similar code to above
        */
        for (int i = 0; i < lureCatalogue.size() - 1; i++) {
            for (int j = 0; j < lureCatalogue.size() - i - 1; j++) {
                if (lureCatalogue.get(j).getBrand().compareTo(lureCatalogue.get(j + 1).getBrand()) < 0) {
                    lure temp = lureCatalogue.get(j);
                    lureCatalogue.set(j, lureCatalogue.get(j + 1));
                    lureCatalogue.set(j + 1, temp);
                }
            }
        }
    }
    /**
     * Binary Search for rod brand
     * 
     * @param search the brand to search for
     * @return the index of the item
     */
    public static int bSearchRodBrand(String search) {
        int l = 0, r = rodCatalogue.size() - 1;//default left and right values
        int m;//middle value
        while (l <= r) {//as long as left is not to the right of right
            m = (l + r) / 2;//find middle value
            if (rodCatalogue.get(m).getBrand().equals(search)) {//if it is found
                return m;//index is the middle
            } else if (rodCatalogue.get(m).getBrand().compareTo(search) < 0) {//if the number is in the right half of the range
                l = m + 1;
            } else {//index is in the bottom hald of the range
                r = m - 1;
            }
        }
        return -1;
    }

    /**
     * Binary Search for reel brand
     * 
     * @param search the brand to search for
     * @return the index of the item
     */
    public static int bSearchReelBrand(String search) {
        /*
        similar code to above
        */
        int l = 0, r = reelCatalogue.size() - 1;
        int m;
        while (l <= r) {
            m = (l + r) / 2;
            if (reelCatalogue.get(m).getBrand().equals(search)) {
                return m;
            } else if (reelCatalogue.get(m).getBrand().compareTo(search) < 0) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return -1;
    }

    /**
     * Binary Search for lure brand
     * 
     * @param search the brand to search for
     * @return the index of the item
     */
    public static int bSearchLureBrand(String search) {
        /*
        similar code to above
        */
        int l = 0, r = lureCatalogue.size() - 1;
        int m;
        while (l <= r) {
            m = (l + r) / 2;
            if (lureCatalogue.get(m).getBrand().equals(search)) {
                return m;
            } else if (lureCatalogue.get(m).getBrand().compareTo(search) < 0) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return -1;
    }

    /**
     * Binary Search for rod model
     * 
     * @param search the model to search for
     * @return the index of the item
     */
    public static int bSearchRodModel(String search) {
        /*
        similar code to above
        */
        int l = 0, r = rodCatalogue.size() - 1;
        int m;
        while (l <= r) {
            m = (l + r) / 2;
            if (rodCatalogue.get(m).getModel().equals(search)) {
                return m;
            } else if (rodCatalogue.get(m).getModel().compareTo(search) < 0) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return -1;
    }

    /**
     * Binary Search for reel model
     * 
     * @param search the model to search for
     * @return the index of the item
     */
    public static int bSearchReelModel(String search) {
        /*
        similar code to above
        */
        int l = 0, r = reelCatalogue.size() - 1;
        int m;
        while (l <= r) {
            m = (l + r) / 2;
            if (reelCatalogue.get(m).getModel().equals(search)) {
                return m;
            } else if (reelCatalogue.get(m).getModel().compareTo(search) < 0) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return -1;
    }

    /**
     * Binary Search for lure model
     * 
     * @param search the model to search for
     * @return the index of the item
     */
    public static int bSearchLureModel(String search) {
        /*
        similar code to above
        */
        int l = 0, r = lureCatalogue.size() - 1;
        int m;
        while (l <= r) {
            m = (l + r) / 2;
            if (lureCatalogue.get(m).getModel().equals(search)) {
                return m;
            } else if (lureCatalogue.get(m).getModel().compareTo(search) < 0) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return -1;
    }

    /**
     * Binary Search for rod price
     * 
     * @param search the price to search for
     * @return the index of the item
     */
    public static int bSearchRodPrice(double search) {
        /*
        similar code to above
        */
        int l = 0, r = rodCatalogue.size() - 1;
        if (rodCatalogue.get(r).getPrice() <= search) {
            return r;
        }
        int ans = -1;
        int m;
        while (l <= r) {
            m = (l + r) / 2;
            if (rodCatalogue.get(m).getPrice() <= search) {
                l = m + 1;
            } else {
                ans = m;
                r = m - 1;
            }
        }
        return ans - 1;
    }

    /**
     * Binary Search for reel price
     * 
     * @param search the price to search for
     * @return the index of the item
     */
    public static int bSearchReelPrice(double search) {
        /*
        similar code to above
        */
        int l = 0, r = reelCatalogue.size() - 1;
        if (reelCatalogue.get(r).getPrice() <= search) {
            return r;
        }
        int ans = -1;
        int m;
        while (l <= r) {
            m = (l + r) / 2;
            if (reelCatalogue.get(m).getPrice() <= search) {
                l = m + 1;
            } else {
                ans = m;
                r = m - 1;
            }
        }
        return ans - 1;
    }

    /**
     * Binary Search for lure price
     * 
     * @param search the price to search for
     * @return the index of the item
     */
    public static int bSearchLurePrice(double search) {
        /*
        similar code to above
        */
        int l = 0, r = lureCatalogue.size() - 1;
        if (lureCatalogue.get(r).getPrice() <= search) {
            return r;
        }
        int ans = -1;
        int m;
        while (l <= r) {
            m = (l + r) / 2;
            if (lureCatalogue.get(m).getPrice() <= search) {
                l = m + 1;
            } else {
                ans = m;
                r = m - 1;
            }
        }
        return ans - 1;
    }

    /**
     * Display all the rods
     * 
     * @param list the ArrayList of items to display
     */
    public static void displayRods(ArrayList<rod> list) {
        ArrayList<String> items = new ArrayList<>();
        for (int i = 0; i < 7; i++) {
            currList[i].clear();//clear what is in the current list
        }
        for (int i = 0; i < list.size(); i++) {//go through each item
            rod current = list.get(i);
            String brand = current.getBrand();
            String model = current.getModel();//action weight type price
            String action = current.getAction();
            String weight = current.getWeight();
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + price);//show the items
            currList[0].add(brand);
            currList[1].add(model);
            currList[2].add(action);
            currList[3].add(weight);
            currList[4].add(type);
            currList[5].add(price);
            currList[6].add(sku);//the items are in the list
        }
        Object[] arr = items.toArray();
        lstItems.setListData(arr);//display the list
    }

    /**
     * Display all the reels
     * 
     * @param list the ArrayList of items to display
     */
    public static void displayReels(ArrayList<reel> list) {
        /*
        similar code to above
        */
        ArrayList<String> items = new ArrayList<>();
        for (int i = 0; i < 7; i++) {
            currList[i].clear();
        }
        for (reel current : list) {
            String brand = current.getBrand();
            String model = current.getModel();//action weight type price
            String retrieve = current.getRetrieve();
            String ratio = Double.toString(current.getGearRatio()) + ":1";
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + price);
            currList[0].add(brand);
            currList[1].add(model);
            currList[2].add(retrieve);
            currList[3].add(ratio);
            currList[4].add(type);
            currList[5].add(price);
            currList[6].add(sku);
        }
        Object[] arr = items.toArray();
        lstItems.setListData(arr);
    }

    /**
     * Display all the lures
     * 
     * @param list the ArrayList of items to display
     */
    public static void displayLures(ArrayList<lure> list) {
        /*
        similar code to above
        */
        ArrayList<String> items = new ArrayList<>();
        for (int i = 0; i < 7; i++) {
            currList[i].clear();
        }
        for (lure current : list) {
            String brand = current.getBrand();
            String model = current.getModel();
            String colour = current.getColour();
            String size = Double.toString(current.getSize());
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + price);
            currList[0].add(brand);
            currList[1].add(model);
            currList[2].add(colour);
            currList[3].add(size);
            currList[4].add(type);
            currList[5].add(price);
            currList[6].add(sku);
        }
        Object[] arr = items.toArray();
        lstItems.setListData(arr);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.ButtonGroup btgSearch;
    private static javax.swing.ButtonGroup btgType;
    private javax.swing.JButton btnDetailsDone;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNo;
    private javax.swing.JButton btnPurchase;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearchCategory;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnShowAll;
    private javax.swing.JButton btnYes;
    private javax.swing.JDialog dlgConfirm;
    private javax.swing.JDialog dlgDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProduct;
    private javax.swing.JLabel lblSku;
    private javax.swing.JLabel lblSpecs;
    private static javax.swing.JList lstCart;
    private static javax.swing.JList lstItems;
    private javax.swing.JPanel pnlEverything;
    private static javax.swing.JRadioButton radBrand;
    private static javax.swing.JRadioButton radLure;
    private static javax.swing.JRadioButton radModel;
    private static javax.swing.JRadioButton radPrice;
    private static javax.swing.JRadioButton radReel;
    private static javax.swing.JRadioButton radRod;
    private javax.swing.JTextField txtSearchField;
    // End of variables declaration//GEN-END:variables
}
