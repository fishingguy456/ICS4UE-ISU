/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package isukevin;
//error check price

import static isukevin.ISUUsergui.bSearchRodBrand;
import static isukevin.ISUUsergui.currList;
import static isukevin.ISUUsergui.displayLures;
import static isukevin.ISUUsergui.displayReels;
import static isukevin.ISUUsergui.displayRods;
import static isukevin.ISUUsergui.sortByBrandAsc;
import static isukevin.ISUUsergui.sortByBrandDes;
import static isukevin.ISUUsergui.sortByModelAsc;
import static isukevin.ISUUsergui.sortByModelDes;
import static isukevin.ISUUsergui.sortByPriceAsc;
import static isukevin.ISUUsergui.sortByPriceDes;
import static isukevin.ISUgui.containsLure;
import static isukevin.ISUgui.containsReel;
import static isukevin.ISUgui.containsRod;
import static isukevin.ISUgui.lureCatalogue;
import static isukevin.ISUgui.lureFile;
import static isukevin.ISUgui.reelCatalogue;
import static isukevin.ISUgui.reelFile;
import static isukevin.ISUgui.rodCatalogue;
import static isukevin.ISUgui.rodFile; //import the files from the user gui
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author 335726246
 */
public class ISUManagergui extends javax.swing.JFrame {

    /**
     * Creates new form ISUManagergui
     */
    public ISUManagergui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgAddItems = new javax.swing.ButtonGroup();
        dlgAddAnItem = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtAddBrand = new javax.swing.JTextField();
        lblAddBrand = new javax.swing.JLabel();
        txtAddModel = new javax.swing.JTextField();
        lblAddModel = new javax.swing.JLabel();
        lblAddAction = new javax.swing.JLabel();
        txtAddAction = new javax.swing.JTextField();
        lblAddWeight = new javax.swing.JLabel();
        txtAddWeight = new javax.swing.JTextField();
        lblAddType = new javax.swing.JLabel();
        txtAddType = new javax.swing.JTextField();
        txtAddPrice = new javax.swing.JTextField();
        lblAddPrice = new javax.swing.JLabel();
        lblAddSKU = new javax.swing.JLabel();
        txtAddSKU = new javax.swing.JTextField();
        btnAddReturnMenu = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        lblAddError = new javax.swing.JLabel();
        lblErrorAdd = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btgDeleteItems = new javax.swing.ButtonGroup();
        dlgDeleteItems = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstDeleteItems = new javax.swing.JList();
        btnDeleteItem = new javax.swing.JButton();
        btnDeleteReturnMenu = new javax.swing.JButton();
        btnBrandSortUpDelete = new javax.swing.JButton();
        btnModelSortUpDelete = new javax.swing.JButton();
        btnSortUpPriceDelete = new javax.swing.JButton();
        btnSortDownBrandDelete = new javax.swing.JButton();
        btnSortDownModelDelete = new javax.swing.JButton();
        btnSortDownPriceDelete = new javax.swing.JButton();
        btgUpdateItems = new javax.swing.ButtonGroup();
        dlgUpdateSelection = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstUpdateItems = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        btnDone = new javax.swing.JButton();
        btnSortBrandUpUpdate = new javax.swing.JButton();
        btnModelSortUpUpdate = new javax.swing.JButton();
        btnSortPriceUpUpdate = new javax.swing.JButton();
        btnSortPriceDownUpdate = new javax.swing.JButton();
        btnSortBrandDownUpdate = new javax.swing.JButton();
        btnModelSortDownUpdate = new javax.swing.JButton();
        dlgUpdateTheItem = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        txtUpdateBrand = new javax.swing.JTextField();
        lblUpdateBrand = new javax.swing.JLabel();
        txtUpdateModel = new javax.swing.JTextField();
        lblUpdateModel = new javax.swing.JLabel();
        lblUpdateAction = new javax.swing.JLabel();
        txtUpdateAction = new javax.swing.JTextField();
        lblUpdateWeight = new javax.swing.JLabel();
        txtUpdateWeight = new javax.swing.JTextField();
        lblUpdateType = new javax.swing.JLabel();
        txtUpdateType = new javax.swing.JTextField();
        txtUpdatePrice = new javax.swing.JTextField();
        lblUpdatePrice = new javax.swing.JLabel();
        lblUpdateSKU = new javax.swing.JLabel();
        txtUpdateSKU = new javax.swing.JTextField();
        btnReturnToMenu = new javax.swing.JButton();
        btnUpdateTheItem = new javax.swing.JButton();
        lblUpdateError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        radAddRod = new javax.swing.JRadioButton();
        radAddReel = new javax.swing.JRadioButton();
        radAddLure = new javax.swing.JRadioButton();
        btnAddItems = new javax.swing.JButton();
        radDeleteRod = new javax.swing.JRadioButton();
        radDeleteReel = new javax.swing.JRadioButton();
        radDeleteLure = new javax.swing.JRadioButton();
        btnDelete = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        radUpdateRod = new javax.swing.JRadioButton();
        radUpdateReel = new javax.swing.JRadioButton();
        radUpdateLure = new javax.swing.JRadioButton();
        btnUpdateItem = new javax.swing.JButton();

        dlgAddAnItem.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dlgAddAnItem.setMinimumSize(new java.awt.Dimension(550, 440));
        dlgAddAnItem.setModal(true);
        dlgAddAnItem.setResizable(false);
        dlgAddAnItem.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                dlgAddAnItemWindowOpened(evt);
            }
        });

        jPanel3.setMaximumSize(new java.awt.Dimension(550, 440));
        jPanel3.setMinimumSize(new java.awt.Dimension(550, 440));
        jPanel3.setPreferredSize(new java.awt.Dimension(550, 440));

        jLabel12.setText("Add an Item");

        lblAddBrand.setText("*Brand:");
        lblAddBrand.setToolTipText("");

        lblAddModel.setText("*Product:");
        lblAddModel.setToolTipText("");

        lblAddAction.setText("Action:");

        lblAddWeight.setText("Weight:");

        lblAddType.setText("Type:");

        lblAddPrice.setText("^Price:");

        lblAddSKU.setText("SKU:");

        btnAddReturnMenu.setText("Return to Manager Menu");
        btnAddReturnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddReturnMenuActionPerformed(evt);
            }
        });

        btnAddItem.setText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        jLabel6.setText("Fields should not include commas");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAddSKU, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAddPrice, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAddType, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAddWeight, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(0, 10, Short.MAX_VALUE)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                                .addComponent(btnAddReturnMenu)
                                                .addGap(64, 64, 64)
                                                .addComponent(btnAddItem))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblErrorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtAddWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtAddSKU, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtAddPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtAddType, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAddAction)
                                    .addComponent(lblAddModel)
                                    .addComponent(lblAddBrand))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(txtAddAction, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtAddModel, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(txtAddBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(9, 9, 9))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel12))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(lblAddError, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAddError, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAddBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddBrand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddModel)
                    .addComponent(txtAddModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddAction)
                    .addComponent(txtAddAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddWeight)
                    .addComponent(txtAddWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddType)
                    .addComponent(txtAddType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddPrice)
                    .addComponent(txtAddPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddSKU)
                    .addComponent(txtAddSKU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblErrorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddReturnMenu)
                            .addComponent(btnAddItem)))
                    .addComponent(jLabel6))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dlgAddAnItemLayout = new javax.swing.GroupLayout(dlgAddAnItem.getContentPane());
        dlgAddAnItem.getContentPane().setLayout(dlgAddAnItemLayout);
        dlgAddAnItemLayout.setHorizontalGroup(
            dlgAddAnItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dlgAddAnItemLayout.setVerticalGroup(
            dlgAddAnItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        dlgDeleteItems.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dlgDeleteItems.setMaximumSize(new java.awt.Dimension(1000, 500));
        dlgDeleteItems.setMinimumSize(new java.awt.Dimension(1000, 500));
        dlgDeleteItems.setModal(true);
        dlgDeleteItems.setPreferredSize(new java.awt.Dimension(1000, 500));
        dlgDeleteItems.setResizable(false);

        jScrollPane1.setViewportView(lstDeleteItems);

        btnDeleteItem.setText("Delete the Selected Item");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnDeleteReturnMenu.setText("Return to Manager Menu");
        btnDeleteReturnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReturnMenuActionPerformed(evt);
            }
        });

        btnBrandSortUpDelete.setText("Ascending Sort by Brand");
        btnBrandSortUpDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrandSortUpDeleteActionPerformed(evt);
            }
        });

        btnModelSortUpDelete.setText("Ascending Sort by Product");
        btnModelSortUpDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelSortUpDeleteActionPerformed(evt);
            }
        });

        btnSortUpPriceDelete.setText("Ascending Sort By Price");
        btnSortUpPriceDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortUpPriceDeleteActionPerformed(evt);
            }
        });

        btnSortDownBrandDelete.setText("Descending Sort by Brand");
        btnSortDownBrandDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortDownBrandDeleteActionPerformed(evt);
            }
        });

        btnSortDownModelDelete.setText("Descending Sort by Product");
        btnSortDownModelDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortDownModelDeleteActionPerformed(evt);
            }
        });

        btnSortDownPriceDelete.setText("Descending Sort by Product");
        btnSortDownPriceDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortDownPriceDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgDeleteItemsLayout = new javax.swing.GroupLayout(dlgDeleteItems.getContentPane());
        dlgDeleteItems.getContentPane().setLayout(dlgDeleteItemsLayout);
        dlgDeleteItemsLayout.setHorizontalGroup(
            dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgDeleteItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dlgDeleteItemsLayout.createSequentialGroup()
                        .addGroup(dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgDeleteItemsLayout.createSequentialGroup()
                                .addGroup(dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(dlgDeleteItemsLayout.createSequentialGroup()
                                        .addComponent(btnBrandSortUpDelete)
                                        .addGap(138, 138, 138)
                                        .addComponent(btnModelSortUpDelete))
                                    .addGroup(dlgDeleteItemsLayout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(btnSortDownBrandDelete)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSortDownModelDelete)))
                                .addGap(82, 82, 82)
                                .addGroup(dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgDeleteItemsLayout.createSequentialGroup()
                                        .addComponent(btnSortUpPriceDelete)
                                        .addGap(97, 97, 97))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgDeleteItemsLayout.createSequentialGroup()
                                        .addComponent(btnSortDownPriceDelete)
                                        .addGap(108, 108, 108)))))
                        .addContainerGap())
                    .addGroup(dlgDeleteItemsLayout.createSequentialGroup()
                        .addComponent(btnDeleteReturnMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteItem)
                        .addGap(193, 193, 193))))
        );
        dlgDeleteItemsLayout.setVerticalGroup(
            dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgDeleteItemsLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrandSortUpDelete)
                    .addComponent(btnModelSortUpDelete)
                    .addComponent(btnSortUpPriceDelete))
                .addGap(18, 18, 18)
                .addGroup(dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSortDownBrandDelete)
                    .addComponent(btnSortDownModelDelete)
                    .addComponent(btnSortDownPriceDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(dlgDeleteItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteReturnMenu)
                    .addComponent(btnDeleteItem))
                .addGap(52, 52, 52))
        );

        dlgUpdateSelection.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dlgUpdateSelection.setMaximumSize(new java.awt.Dimension(1000, 500));
        dlgUpdateSelection.setMinimumSize(new java.awt.Dimension(1000, 500));
        dlgUpdateSelection.setModal(true);
        dlgUpdateSelection.setPreferredSize(new java.awt.Dimension(1000, 500));
        dlgUpdateSelection.setResizable(false);

        lstUpdateItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstUpdateItemsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstUpdateItems);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Click the item that you would like to update");

        btnDone.setText("Return to Manager Menu");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        btnSortBrandUpUpdate.setText("Ascending Sort by Brand");
        btnSortBrandUpUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortBrandUpUpdateActionPerformed(evt);
            }
        });

        btnModelSortUpUpdate.setText("Ascending Sort by Product");
        btnModelSortUpUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelSortUpUpdateActionPerformed(evt);
            }
        });

        btnSortPriceUpUpdate.setText("Ascending Sort By Price");
        btnSortPriceUpUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortPriceUpUpdateActionPerformed(evt);
            }
        });

        btnSortPriceDownUpdate.setText("Descending Sort By Price");
        btnSortPriceDownUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortPriceDownUpdateActionPerformed(evt);
            }
        });

        btnSortBrandDownUpdate.setText("Descending Sort by Brand");
        btnSortBrandDownUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortBrandDownUpdateActionPerformed(evt);
            }
        });

        btnModelSortDownUpdate.setText("Descending Sort by Product");
        btnModelSortDownUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelSortDownUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgUpdateSelectionLayout = new javax.swing.GroupLayout(dlgUpdateSelection.getContentPane());
        dlgUpdateSelection.getContentPane().setLayout(dlgUpdateSelectionLayout);
        dlgUpdateSelectionLayout.setHorizontalGroup(
            dlgUpdateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(dlgUpdateSelectionLayout.createSequentialGroup()
                .addGroup(dlgUpdateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dlgUpdateSelectionLayout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(jLabel3))
                    .addGroup(dlgUpdateSelectionLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(btnDone))
                    .addGroup(dlgUpdateSelectionLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(dlgUpdateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dlgUpdateSelectionLayout.createSequentialGroup()
                                .addComponent(btnSortBrandDownUpdate)
                                .addGap(100, 100, 100)
                                .addComponent(btnModelSortDownUpdate)
                                .addGap(104, 104, 104)
                                .addComponent(btnSortPriceDownUpdate))
                            .addGroup(dlgUpdateSelectionLayout.createSequentialGroup()
                                .addComponent(btnSortBrandUpUpdate)
                                .addGap(100, 100, 100)
                                .addComponent(btnModelSortUpUpdate)
                                .addGap(104, 104, 104)
                                .addComponent(btnSortPriceUpUpdate)))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        dlgUpdateSelectionLayout.setVerticalGroup(
            dlgUpdateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgUpdateSelectionLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(dlgUpdateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSortBrandUpUpdate)
                    .addComponent(btnModelSortUpUpdate)
                    .addComponent(btnSortPriceUpUpdate))
                .addGap(18, 18, 18)
                .addGroup(dlgUpdateSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSortBrandDownUpdate)
                    .addComponent(btnModelSortDownUpdate)
                    .addComponent(btnSortPriceDownUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(btnDone)
                .addContainerGap())
        );

        dlgUpdateTheItem.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dlgUpdateTheItem.setMinimumSize(new java.awt.Dimension(550, 450));
        dlgUpdateTheItem.setModal(true);
        dlgUpdateTheItem.setResizable(false);

        jPanel4.setMaximumSize(new java.awt.Dimension(550, 375));
        jPanel4.setMinimumSize(new java.awt.Dimension(550, 375));
        jPanel4.setPreferredSize(new java.awt.Dimension(550, 375));

        jLabel13.setText("Update an Item");

        lblUpdateBrand.setText("*Brand:");
        lblUpdateBrand.setToolTipText("");

        lblUpdateModel.setText("*Product:");
        lblUpdateModel.setToolTipText("");

        lblUpdateAction.setText("Action:");

        lblUpdateWeight.setText("Weight:");

        lblUpdateType.setText("Type:");

        lblUpdatePrice.setText("^Price:");

        lblUpdateSKU.setText("SKU:");

        btnReturnToMenu.setText("Return to Manager Menu");
        btnReturnToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnToMenuActionPerformed(evt);
            }
        });

        btnUpdateTheItem.setText("Update the Item");
        btnUpdateTheItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTheItemActionPerformed(evt);
            }
        });

        jLabel7.setText("Fields should not include commas");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblUpdateError, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(230, 230, 230)
                            .addComponent(jLabel13))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnUpdateTheItem)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblUpdateSKU, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblUpdatePrice, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblUpdateType, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblUpdateWeight, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(btnReturnToMenu)
                                                .addComponent(txtUpdateWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtUpdateType, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtUpdatePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtUpdateSKU, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel7))
                                            .addGap(88, 88, 88))
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblUpdateAction)
                                                .addComponent(lblUpdateModel))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtUpdateAction, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(25, 25, 25))))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtUpdateModel, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(lblUpdateBrand)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtUpdateBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addGap(19, 19, 19)
                .addComponent(lblUpdateError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUpdateBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUpdateBrand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateModel)
                    .addComponent(txtUpdateModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateAction)
                    .addComponent(txtUpdateAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateWeight)
                    .addComponent(txtUpdateWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateType)
                    .addComponent(txtUpdateType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdatePrice)
                    .addComponent(txtUpdatePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateSKU)
                    .addComponent(txtUpdateSKU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateTheItem)
                    .addComponent(btnReturnToMenu))
                .addContainerGap())
        );

        javax.swing.GroupLayout dlgUpdateTheItemLayout = new javax.swing.GroupLayout(dlgUpdateTheItem.getContentPane());
        dlgUpdateTheItem.getContentPane().setLayout(dlgUpdateTheItemLayout);
        dlgUpdateTheItemLayout.setHorizontalGroup(
            dlgUpdateTheItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dlgUpdateTheItemLayout.setVerticalGroup(
            dlgUpdateTheItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Add");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Delete");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Manager (admin)");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Update");

        radAddRod.setText("Rod");

        radAddReel.setText("Reel");

        radAddLure.setText("Lure");

        btnAddItems.setText("Add an Item");
        btnAddItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemsActionPerformed(evt);
            }
        });

        radDeleteRod.setText("Rod");

        radDeleteReel.setText("Reel");

        radDeleteLure.setText("Lure");

        btnDelete.setText("Delete an Item");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        radUpdateRod.setText("Rod");

        radUpdateReel.setText("Reel");

        radUpdateLure.setText("Lure");

        btnUpdateItem.setText("Update An Item");
        btnUpdateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(radAddRod)
                    .addComponent(radAddReel)
                    .addComponent(radAddLure)
                    .addComponent(btnAddItems)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(251, 251, 251)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radDeleteRod)
                            .addComponent(jLabel1)
                            .addComponent(radDeleteLure)
                            .addComponent(radDeleteReel)
                            .addComponent(btnDelete)
                            .addComponent(btnLogout))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(radUpdateRod)
                    .addComponent(radUpdateReel)
                    .addComponent(radUpdateLure)
                    .addComponent(btnUpdateItem))
                .addGap(103, 103, 103))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radAddRod)
                    .addComponent(radDeleteRod)
                    .addComponent(radUpdateRod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radAddReel)
                    .addComponent(radDeleteReel)
                    .addComponent(radUpdateReel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radAddLure)
                    .addComponent(radDeleteLure)
                    .addComponent(radUpdateLure))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddItems)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdateItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addGap(103, 103, 103))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        btgAddItems.add(radAddRod);
        btgAddItems.add(radAddReel);
        btgAddItems.add(radAddLure);
        btgDeleteItems.add(radDeleteRod);
        btgDeleteItems.add(radDeleteReel);
        btgDeleteItems.add(radDeleteLure);
        btgUpdateItems.add(radUpdateRod);
        btgUpdateItems.add(radUpdateReel);
        btgUpdateItems.add(radUpdateLure);//add the items to the button group
    }//GEN-LAST:event_formWindowOpened

    private void btnAddItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemsActionPerformed
        // TODO add your handling code here:
        if (radAddRod.isSelected() || radAddReel.isSelected() || radAddLure.isSelected()) {
            txtAddBrand.setText("");
            txtAddModel.setText("");
            txtAddAction.setText("");
            txtAddWeight.setText("");
            txtAddType.setText("");
            txtAddPrice.setText("");
            txtAddSKU.setText("");//empty the text boxes
            if (radAddReel.isSelected()) {
                lblAddError.setText("^Gear Ratio and Price must be numeric");
                lblAddAction.setText("Retrieve:");
                lblAddWeight.setText("^Gear Ratio:");//change the fields for each type of item
            }
            if (radAddRod.isSelected()) {
                lblAddError.setText("^Price must be numeric");
                lblAddAction.setText("Action:");
                lblAddWeight.setText("Weight:");
            }
            if (radAddLure.isSelected()) {
                lblAddError.setText("^Size and Price must be numeric");
                lblAddAction.setText("Colour:");
                lblAddWeight.setText("^Size:");
            }
            lblErrorAdd.setText("");
            dlgAddAnItem.setVisible(true);

        }
    }//GEN-LAST:event_btnAddItemsActionPerformed

    private void dlgAddAnItemWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dlgAddAnItemWindowOpened
        // TODO add your handling code here:
        txtAddBrand.setText("");
        txtAddModel.setText("");
        txtAddAction.setText("");
        txtAddWeight.setText("");
        txtAddType.setText("");
        txtAddPrice.setText("");
        txtAddSKU.setText("");//empty the text boxes
        if (radAddReel.isSelected()) {
            lblAddError.setText("^Gear Ratio and Price must be numeric");
            lblAddAction.setText("Retrieve:");
            lblAddWeight.setText("^Gear Ratio:");//change the fiels for each tupe of item
        }
        if (radAddRod.isSelected()) {
            lblAddError.setText("^Price must be numeric");
            lblAddAction.setText("Action:");
            lblAddWeight.setText("Weight:");
        }
        if (radAddLure.isSelected()) {
            lblAddError.setText("^Size and Price must be numeric");
            lblAddAction.setText("Colour:");
            lblAddWeight.setText("^Size:");
        }
        lblErrorAdd.setText("");
    }//GEN-LAST:event_dlgAddAnItemWindowOpened

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        // TODO add your handling code here:
        boolean error = false;
        if (radAddRod.isSelected()) {//if rod is to be added
            String brand = txtAddBrand.getText();
            String model = txtAddModel.getText();//action weight type price
            String action = txtAddAction.getText();
            String weight = txtAddWeight.getText();
            String type = txtAddType.getText();
            String price = txtAddPrice.getText();
            String sku = txtAddSKU.getText();
            if (!price.equals("") && isNumeric(price) && !brand.equals("") && !model.equals("") && !brand.contains(",") && !model.contains(",") && !action.contains(",") && !weight.contains(",") && !type.contains(",") && !sku.contains(",")) {
                //error checking, fields cannot be empty, cannot contain commas and some must be numeric
                rod newRod = new rod(brand, model, action, weight, type, Double.parseDouble(price), sku);
                if (!containsRod(newRod)) {//if the item does not exist
                    rodCatalogue.add(newRod);
                } else {
                    JOptionPane.showMessageDialog(null, "That product already exists");
                    error = true;//product exists
                }
                try {
                    PrintWriter pw = new PrintWriter(rodFile);
                    rewriteRod(pw);//rewrite the file
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (price.equals("") || brand.equals("") || model.equals("")) {
                JOptionPane.showMessageDialog(null, "Please do not have empty fields");
                error = true;//must not be empty
            } else {
                JOptionPane.showMessageDialog(null, "Please do not include any commas in any field");
                error = true;//no commas allowed
            }
        } else if (radAddReel.isSelected()) {
            /*
             similar code to above
             */
            String brand = txtAddBrand.getText();
            String model = txtAddModel.getText();
            String retrieve = txtAddAction.getText();
            String ratio = txtAddWeight.getText();
            String type = txtAddType.getText();
            String price = txtAddPrice.getText();
            String sku = txtAddSKU.getText();
            if ((!price.equals("") && !ratio.equals("")) && isNumeric(price) && isNumeric(ratio) && !brand.equals("") && !model.equals("") && !brand.contains(",") && !model.contains(",") && !retrieve.contains(",") && !type.contains(",") && !sku.contains(",")) {
                reel newReel = new reel(brand, model, retrieve, Double.parseDouble(ratio), type, Double.parseDouble(price), sku);
                if (!containsReel(newReel)) {
                    reelCatalogue.add(newReel);
                } else {
                    JOptionPane.showMessageDialog(null, "That product already exists");
                    error = true;
                }
                try {
                    PrintWriter pw = new PrintWriter(reelFile);
                    rewriteReel(pw);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (price.equals("") || ratio.equals("") || brand.equals("") || model.equals("")) {
                JOptionPane.showMessageDialog(null, "Please do not have empty fields");
                error = true;
            } else {
                JOptionPane.showMessageDialog(null, "Please do not include any commas in any field");
                error = true;
            }
        } else if (radAddLure.isSelected()) {
            /*
             similar code to above
             */
            String brand = txtAddBrand.getText();
            String model = txtAddModel.getText();
            String colour = txtAddAction.getText();
            String size = txtAddWeight.getText();
            String type = txtAddType.getText();
            String price = txtAddPrice.getText();
            String sku = txtAddSKU.getText();
            if ((!price.equals("") && !size.equals("")) && isNumeric(price) && isNumeric(size) && !brand.equals("") && !model.equals("") && !brand.contains(",") && !model.contains(",") && !colour.contains(",") && !type.contains(",") && !sku.contains(",")) {
                lure newLure = new lure(brand, model, colour, Double.parseDouble(size), type, Double.parseDouble(price), sku);
                if (!containsLure(newLure)) {
                    lureCatalogue.add(newLure);
                } else {
                    JOptionPane.showMessageDialog(null, "That product already exists");
                    error = true;
                }
                try {
                    PrintWriter pw = new PrintWriter(lureFile);
                    rewriteLure(pw);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (!isNumeric(price) || !isNumeric(size)) {
                JOptionPane.showMessageDialog(null, "Price and Size must be numeric");
                error = true;
            } else if (price.equals("") || size.equals("") || brand.equals("") || model.equals("")) {
                JOptionPane.showMessageDialog(null, "Please do not have empty fields");
                error = true;
            } else {
                JOptionPane.showMessageDialog(null, "Please do not include any commas in any field");
                error = true;
            }
        }
        if (error == false) {//no errors, close the dialog
            dlgAddAnItem.setVisible(false);
        }
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (radDeleteRod.isSelected()) {
            displayRod(lstDeleteItems);//display the items and show the dialog
            dlgDeleteItems.setVisible(true);
        } else if (radDeleteReel.isSelected()) {
            displayReel(lstDeleteItems);
            dlgDeleteItems.setVisible(true);
        } else if (radDeleteLure.isSelected()) {
            displayLure(lstDeleteItems);
            dlgDeleteItems.setVisible(true);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        // TODO add your handling code here:
        int idx = lstDeleteItems.getSelectedIndex();
        if (idx == -1) {//something has to be selected
            JOptionPane.showMessageDialog(null, "Please select an item to delete");
        } else {
            int option = JOptionPane.showConfirmDialog(null, "Are you sure that you would like to delete the item?", "Delete", JOptionPane.YES_NO_OPTION);//ask for confirmation
            if (option == JOptionPane.YES_OPTION) {//confirmed
                if (radDeleteRod.isSelected()) {
                    rodCatalogue.remove(idx);//remove the items
                    displayRod(lstDeleteItems);//display the changed list
                    try {
                        PrintWriter pw = new PrintWriter(rodFile);
                        rewriteRod(pw);//rewrite the file
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (radDeleteReel.isSelected()) {
                    reelCatalogue.remove(idx);//remove the items
                    displayReel(lstDeleteItems);//display the changed list
                    try {
                        PrintWriter pw = new PrintWriter(reelFile);
                        rewriteReel(pw);//rewrite the file
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (radDeleteLure.isSelected()) {
                    lureCatalogue.remove(idx);//remove the items
                    displayLure(lstDeleteItems);//display the changed list
                    try {
                        PrintWriter pw = new PrintWriter(lureFile);
                        rewriteLure(pw);//rewrite the file
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnAddReturnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddReturnMenuActionPerformed
        // TODO add your handling code here:
        dlgAddAnItem.setVisible(false);//close the dialog, return to the manager section
    }//GEN-LAST:event_btnAddReturnMenuActionPerformed

    private void btnDeleteReturnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReturnMenuActionPerformed
        // TODO add your handling code here:
        dlgDeleteItems.setVisible(false);//close the dialog, return to the manager section
    }//GEN-LAST:event_btnDeleteReturnMenuActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        try {
            ISUgui HomeGui = new ISUgui();//log out and go to the home page
            dispose();
            HomeGui.setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(ISUUsergui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnUpdateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateItemActionPerformed
        // TODO add your handling code here:
        if (radUpdateRod.isSelected()) {
            displayRod(lstUpdateItems);//display the rods
        } else if (radUpdateReel.isSelected()) {
            displayReel(lstUpdateItems);
        } else if (radUpdateLure.isSelected()) {
            displayLure(lstUpdateItems);
        }
        dlgUpdateSelection.setVisible(true);
        //displayupdate
    }//GEN-LAST:event_btnUpdateItemActionPerformed
    public int n;
    private void lstUpdateItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstUpdateItemsMouseClicked
        // TODO add your handling code here:
        n = lstUpdateItems.getSelectedIndex();//find out which item was selected
        if (radUpdateRod.isSelected()) {//update a rod
            rod current = rodCatalogue.get(n);
            String brand = current.getBrand();
            String model = current.getModel();
            String action = current.getAction();
            String weight = current.getWeight();
            String type = current.getType();
            double price = current.getPrice();
            String sku = current.getSku();
            lblUpdateAction.setText("Action:");
            lblUpdateWeight.setText("Weight:");//change fields for the type
            txtUpdateBrand.setText(brand);
            txtUpdateModel.setText(model);
            txtUpdateAction.setText(action);
            txtUpdateWeight.setText(weight);
            txtUpdateType.setText(type);
            txtUpdatePrice.setText(Double.toString(price));
            txtUpdateSKU.setText(sku);
            lblUpdateError.setText("^Price must be numeric");
        } else if (radUpdateReel.isSelected()) {
            /*
             similar code to above
             */
            reel current = reelCatalogue.get(n);
            String brand = current.getBrand();
            String model = current.getModel();
            String retrieve = current.getRetrieve();
            double ratio = current.getGearRatio();
            String type = current.getType();
            double price = current.getPrice();
            String sku = current.getSku();
            lblUpdateAction.setText("^Gear Ratio:");
            lblUpdateWeight.setText("Retrieve:");
            txtUpdateBrand.setText(brand);
            txtUpdateModel.setText(model);
            txtUpdateAction.setText(retrieve);
            txtUpdateWeight.setText(Double.toString(ratio));
            txtUpdateType.setText(type);
            txtUpdatePrice.setText(Double.toString(price));
            txtUpdateSKU.setText(sku);
            lblUpdateError.setText("^Gear Ratio and Price must be numeric");
        } else if (radUpdateLure.isSelected()) {
            /*
             similar code to above
             */
            lure current = lureCatalogue.get(n);
            String brand = current.getBrand();
            String model = current.getModel();
            String colour = current.getColour();
            double size = current.getSize();
            String type = current.getType();
            double price = current.getPrice();
            String sku = current.getSku();
            lblUpdateAction.setText("Colour:");
            lblUpdateWeight.setText("^Size:");
            txtUpdateBrand.setText(brand);
            txtUpdateModel.setText(model);
            txtUpdateAction.setText(colour);
            txtUpdateWeight.setText(Double.toString(size));
            txtUpdateType.setText(type);
            txtUpdatePrice.setText(Double.toString(price));
            txtUpdateSKU.setText(sku);
            lblUpdateError.setText("^Size and Price must be numeric");
        }
        dlgUpdateTheItem.setVisible(true);
    }//GEN-LAST:event_lstUpdateItemsMouseClicked

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        // TODO add your handling code here:
        dlgUpdateSelection.setVisible(false);//close the dialog, return to manager section
    }//GEN-LAST:event_btnDoneActionPerformed

    private void btnReturnToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnToMenuActionPerformed
        // TODO add your handling code here:
        dlgUpdateTheItem.setVisible(false);//close the dialog, return to manager section
    }//GEN-LAST:event_btnReturnToMenuActionPerformed

    private void btnUpdateTheItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTheItemActionPerformed
        // TODO add your handling code here:
        boolean error = false;
        if (radUpdateRod.isSelected()) {
            if (!txtUpdatePrice.getText().equals("") && isNumeric(txtUpdatePrice.getText()) && !txtUpdateBrand.getText().equals("") && !txtUpdateModel.getText().equals("") && !txtUpdateBrand.getText().contains(",") && !txtUpdateModel.getText().contains(",") && !txtUpdateAction.getText().contains(",") && !txtUpdateWeight.getText().contains(",") && !txtUpdateType.getText().contains(",") && !txtUpdateSKU.getText().contains(",")) {
                //error checking to make sure that items are not empty, certain items are numeric and no commas
                rod newRod = new rod(txtUpdateBrand.getText(), txtUpdateModel.getText(), txtUpdateAction.getText(), txtUpdateWeight.getText(), txtUpdateType.getText(), Double.parseDouble(txtUpdatePrice.getText()), txtUpdateSKU.getText());
                if (!containsRod(newRod)) {//if the item does not exist
                    rodCatalogue.set(n, newRod);//replace items
                } else {
                    JOptionPane.showMessageDialog(null, "That product already exists");
                    error = true;//notify user
                }
                try {
                    PrintWriter pw = new PrintWriter(rodFile);
                    rewriteRod(pw);//rewrite to the file
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (txtUpdatePrice.getText().equals("") || txtUpdateBrand.getText().equals("") || txtUpdateModel.getText().equals("")) {
                //empty fields
                JOptionPane.showMessageDialog(null, "Please do not have empty fields");
                error = true;
            } else {//commas
                JOptionPane.showMessageDialog(null, "Please do not include any commas in any field");
                error = true;
            }
        } else if (radUpdateReel.isSelected()) {
            /*
             similar code to above
             */
            if ((!txtUpdatePrice.getText().equals("") && !txtUpdateWeight.getText().equals("")) && isNumeric(txtUpdatePrice.getText()) && isNumeric(txtUpdateWeight.getText()) && !txtUpdateBrand.getText().equals("") && !txtUpdateModel.getText().equals("") && !txtUpdateBrand.getText().contains(",") && !txtUpdateModel.getText().contains(",") && !txtUpdateAction.getText().contains(",") && !txtUpdateType.getText().contains(",") && !txtUpdateSKU.getText().contains(",")) {
                reel newReel = new reel(txtUpdateBrand.getText(), txtUpdateModel.getText(), txtUpdateAction.getText(), Double.parseDouble(txtUpdateWeight.getText()), txtUpdateType.getText(), Double.parseDouble(txtUpdatePrice.getText()), txtUpdateSKU.getText());
                if (!containsReel(newReel)) {
                    reelCatalogue.set(n, newReel);
                } else {
                    JOptionPane.showMessageDialog(null, "That product already exists");
                    error = true;
                }
                try {
                    PrintWriter pw = new PrintWriter(reelFile);
                    rewriteReel(pw);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (!isNumeric(txtUpdatePrice.getText()) || !isNumeric(txtUpdateWeight.getText())) {
                JOptionPane.showMessageDialog(null, "Price and Gear Ratio must be numeric");
                error = true;
            } else if (txtUpdatePrice.getText().equals("") || txtUpdateWeight.getText().equals("") || txtUpdateBrand.getText().equals("") || txtUpdateModel.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please do not have empty fields");
                error = true;
            } else {
                JOptionPane.showMessageDialog(null, "Please do not include any commas in any field");
                error = true;
            }
        } else if (radUpdateLure.isSelected()) {
            /*
             similar code to above
             */
            if ((!txtUpdatePrice.getText().equals("") && !txtUpdateWeight.getText().equals("")) && isNumeric(txtUpdatePrice.getText()) && isNumeric(txtUpdateWeight.getText()) && !txtUpdateBrand.getText().equals("") && !txtUpdateModel.getText().equals("") && !txtUpdateBrand.getText().contains(",") && !txtUpdateModel.getText().contains(",") && !txtUpdateAction.getText().contains(",") && !txtUpdateType.getText().contains(",") && !txtUpdateSKU.getText().contains(",")) {
                lure newLure = new lure(txtUpdateBrand.getText(), txtUpdateModel.getText(), txtUpdateAction.getText(), Double.parseDouble(txtUpdateWeight.getText()), txtUpdateType.getText(), Double.parseDouble(txtUpdatePrice.getText()), txtUpdateSKU.getText());
                if (!containsLure(newLure)) {
                    lureCatalogue.set(n, newLure);
                } else {
                    JOptionPane.showMessageDialog(null, "That product already exists");
                    error = true;
                }
                try {
                    PrintWriter pw = new PrintWriter(lureFile);
                    rewriteLure(pw);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (!isNumeric(txtUpdatePrice.getText()) || !isNumeric(txtUpdateWeight.getText())) {
                JOptionPane.showMessageDialog(null, "Price and Size must be numeric");
                error = true;
            } else if (txtUpdatePrice.getText().equals("") || txtUpdateWeight.getText().equals("") || txtUpdateBrand.getText().equals("") || txtUpdateModel.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please do not have empty fields");
                error = true;
            } else {
                JOptionPane.showMessageDialog(null, "Please do not include any commas in any field");
                error = true;
            }
        }
        if (error == false) {//there were no errors
            ArrayList<String> items = new ArrayList<String>();
            if (radUpdateRod.isSelected()) {
                for (rod current : rodCatalogue) {//go through each rod
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String action = current.getAction();
                    String weight = current.getWeight();
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();
                    items.add(brand + ", " + model + ", " + action + ", " + weight + ", " + type + ", " + price + ", " + sku);//add them to the arraylist to be displayed
                }
            } else if (radUpdateReel.isSelected()) {
                /*
                 similar code to above
                 */
                for (reel current : reelCatalogue) {
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String retrieve = current.getRetrieve();
                    String ratio = current.getGearRatio() + ":1";
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();
                    items.add(brand + ", " + model + ", " + retrieve + ", " + ratio + ", " + type + ", " + price + ", " + sku);
                }
            } else if (radUpdateLure.isSelected()) {
                /*
                 similar code to above
                 */
                for (lure current : lureCatalogue) {
                    String brand = current.getBrand();
                    String model = current.getModel();//action weight type price
                    String colour = current.getColour();
                    double size = current.getSize();
                    String type = current.getType();
                    String price = "$" + Double.toString(current.getPrice());
                    String sku = current.getSku();
                    items.add(brand + ", " + model + ", " + colour + ", " + size + ", " + type + ", " + price + ", " + sku);
                }
            }
            Object[] arr = items.toArray();
            lstUpdateItems.setListData(arr);//display the changed item
            dlgUpdateTheItem.setVisible(false);//close the dialog
        }
    }//GEN-LAST:event_btnUpdateTheItemActionPerformed

    private void btnBrandSortUpDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrandSortUpDeleteActionPerformed
        // TODO add your handling code here:
        sortByBrandAsc();//sort by brand ascending
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);//rewrite everything
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radDeleteRod.isSelected()) {
            displayRod(lstDeleteItems);
        }
        if (radDeleteReel.isSelected()) {
            displayReel(lstDeleteItems);
        }
        if (radDeleteLure.isSelected()) {
            displayLure(lstDeleteItems);
        }//show the elements in the list
    }//GEN-LAST:event_btnBrandSortUpDeleteActionPerformed

    private void btnModelSortUpDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelSortUpDeleteActionPerformed
        // TODO add your handling code here:
        sortByModelAsc();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radDeleteRod.isSelected()) {
            displayRod(lstDeleteItems);
        }
        if (radDeleteReel.isSelected()) {
            displayReel(lstDeleteItems);
        }
        if (radDeleteLure.isSelected()) {
            displayLure(lstDeleteItems);
        }
    }//GEN-LAST:event_btnModelSortUpDeleteActionPerformed

    private void btnSortUpPriceDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortUpPriceDeleteActionPerformed
        // TODO add your handling code here:
        sortByPriceAsc();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radDeleteRod.isSelected()) {
            displayRod(lstDeleteItems);
        }
        if (radDeleteReel.isSelected()) {
            displayReel(lstDeleteItems);
        }
        if (radDeleteLure.isSelected()) {
            displayLure(lstDeleteItems);
        }
    }//GEN-LAST:event_btnSortUpPriceDeleteActionPerformed

    private void btnSortBrandUpUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortBrandUpUpdateActionPerformed
        // TODO add your handling code here:
        sortByBrandAsc();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radUpdateRod.isSelected()) {
            displayRod(lstUpdateItems);
            displayRod(lstDeleteItems);
        }
        if (radUpdateReel.isSelected()) {
            displayReel(lstUpdateItems);
            displayReel(lstDeleteItems);
        }
        if (radUpdateLure.isSelected()) {
            displayLure(lstUpdateItems);
            displayLure(lstDeleteItems);
        }
    }//GEN-LAST:event_btnSortBrandUpUpdateActionPerformed

    private void btnModelSortUpUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelSortUpUpdateActionPerformed
        // TODO add your handling code here:
        sortByModelAsc();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radUpdateRod.isSelected()) {
            displayRod(lstUpdateItems);
            displayRod(lstDeleteItems);
        }
        if (radUpdateReel.isSelected()) {
            displayReel(lstUpdateItems);
            displayReel(lstDeleteItems);
        }
        if (radUpdateLure.isSelected()) {
            displayLure(lstUpdateItems);
            displayLure(lstDeleteItems);
        }
    }//GEN-LAST:event_btnModelSortUpUpdateActionPerformed

    private void btnSortPriceUpUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortPriceUpUpdateActionPerformed
        // TODO add your handling code here:
        sortByPriceAsc();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radUpdateRod.isSelected()) {
            displayRod(lstUpdateItems);
            displayRod(lstDeleteItems);
        }
        if (radUpdateReel.isSelected()) {
            displayReel(lstUpdateItems);
            displayReel(lstDeleteItems);
        }
        if (radUpdateLure.isSelected()) {
            displayLure(lstUpdateItems);
            displayLure(lstDeleteItems);
        }
    }//GEN-LAST:event_btnSortPriceUpUpdateActionPerformed

    private void btnSortDownBrandDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortDownBrandDeleteActionPerformed
        // TODO add your handling code here:
        sortByBrandDes();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radDeleteRod.isSelected()) {
            displayRod(lstDeleteItems);
        }
        if (radDeleteReel.isSelected()) {
            displayReel(lstDeleteItems);
        }
        if (radDeleteLure.isSelected()) {
            displayLure(lstDeleteItems);
        }
    }//GEN-LAST:event_btnSortDownBrandDeleteActionPerformed

    private void btnSortDownModelDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortDownModelDeleteActionPerformed
        // TODO add your handling code here:
        sortByModelDes();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radDeleteRod.isSelected()) {
            displayRod(lstDeleteItems);
        }
        if (radDeleteReel.isSelected()) {
            displayReel(lstDeleteItems);
        }
        if (radDeleteLure.isSelected()) {
            displayLure(lstDeleteItems);
        }
    }//GEN-LAST:event_btnSortDownModelDeleteActionPerformed

    private void btnSortDownPriceDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortDownPriceDeleteActionPerformed
        // TODO add your handling code here:
        sortByPriceDes();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radDeleteRod.isSelected()) {
            displayRod(lstDeleteItems);
        }
        if (radDeleteReel.isSelected()) {
            displayReel(lstDeleteItems);
        }
        if (radDeleteLure.isSelected()) {
            displayLure(lstDeleteItems);
        }
    }//GEN-LAST:event_btnSortDownPriceDeleteActionPerformed

    private void btnSortPriceDownUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortPriceDownUpdateActionPerformed
        // TODO add your handling code here:
        sortByPriceDes();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radUpdateRod.isSelected()) {
            displayRod(lstUpdateItems);
        }
        if (radUpdateReel.isSelected()) {
            displayReel(lstUpdateItems);
        }
        if (radUpdateLure.isSelected()) {
            displayLure(lstUpdateItems);
        }
    }//GEN-LAST:event_btnSortPriceDownUpdateActionPerformed

    private void btnSortBrandDownUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortBrandDownUpdateActionPerformed
        // TODO add your handling code here:
        sortByBrandDes();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radUpdateRod.isSelected()) {
            displayRod(lstUpdateItems);
        }
        if (radUpdateReel.isSelected()) {
            displayReel(lstUpdateItems);
        }
        if (radUpdateLure.isSelected()) {
            displayLure(lstUpdateItems);
        }
    }//GEN-LAST:event_btnSortBrandDownUpdateActionPerformed

    private void btnModelSortDownUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelSortDownUpdateActionPerformed
        // TODO add your handling code here:
        sortByModelDes();
        /*
         similar code to above
         */
        try {
            PrintWriter pwRod = new PrintWriter(rodFile);
            rewriteRod(pwRod);
            PrintWriter pwReel = new PrintWriter(reelFile);
            rewriteReel(pwReel);
            PrintWriter pwLure = new PrintWriter(lureFile);
            rewriteLure(pwLure);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ISUManagergui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (radUpdateRod.isSelected()) {
            displayRod(lstUpdateItems);
        }
        if (radUpdateReel.isSelected()) {
            displayReel(lstUpdateItems);
        }
        if (radUpdateLure.isSelected()) {
            displayLure(lstUpdateItems);
        }
    }//GEN-LAST:event_btnModelSortDownUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ISUManagergui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ISUManagergui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ISUManagergui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ISUManagergui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ISUManagergui().setVisible(true);
            }
        });
    }

    /**
     * Determines if the string is a number
     *
     * @param str the string to look at
     * @return whether it is a number
     */
    public static boolean isNumeric(String str) {
        int periods = 0;
        for (char c : str.toCharArray()) {//each individual character
            if (c == '.') {//if it is a period
                periods++;
            }
            if (!Character.isDigit(c) && c != '.') {//if it is a digit, deal with periods later
                return false;
            }
            if (c == '.' && periods > 1) {//multiple periods
                return false;
            }
        }
        return true;
    }

    /**
     * Display the rods into the list
     *
     * @param list the list to display to
     */
    public static void displayRod(JList list) {
        ArrayList<String> items = new ArrayList<>();
        for (rod current : rodCatalogue) {//go through all rods
            String brand = current.getBrand();
            String model = current.getModel();//action weight type price
            String action = current.getAction();
            String weight = current.getWeight();
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + action + ", " + weight + ", " + type + ", " + price + ", " + sku);//add the information to the list
        }
        Object[] arr = items.toArray();
        list.setListData(arr);//display the list
    }

    /**
     * Display the reels into the list
     *
     * @param list the list to display onto
     */
    public static void displayReel(JList list) {
        ArrayList<String> items = new ArrayList<>();
        for (reel current : reelCatalogue) {//go through all reels
            String brand = current.getBrand();
            String model = current.getModel();//action weight type price
            String retrieve = current.getRetrieve();
            String ratio = current.getGearRatio() + ":1";
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + retrieve + ", " + ratio + ", " + type + ", " + price + ", " + sku);//add the information to the list
        }
        Object[] arr = items.toArray();
        list.setListData(arr);//display the list
    }

    /**
     * Display the lures into the list
     *
     * @param list the list to display onto
     */
    public static void displayLure(JList list) {
        ArrayList<String> items = new ArrayList<>();
        for (lure current : lureCatalogue) {//go through all the lures
            String brand = current.getBrand();
            String model = current.getModel();//action weight type price
            String colour = current.getColour();
            String size = Double.toString(current.getSize());
            String type = current.getType();
            String price = "$" + Double.toString(current.getPrice());
            String sku = current.getSku();
            items.add(brand + ", " + model + ", " + colour + ", " + size + ", " + type + ", " + price + ", " + sku);//add the information to the list
        }
        Object[] arr = items.toArray();
        list.setListData(arr);//display the list
    }

    /**
     * Rewrite the rod file
     *
     * @param pw the PrintWriter to use
     */
    public static void rewriteRod(PrintWriter pw) {
        for (rod current : rodCatalogue) {//go through each rod
            String brand = current.getBrand();
            String model = current.getModel();
            String action = current.getAction();
            String weight = current.getWeight();
            String type = current.getType();
            double price = current.getPrice();
            String sku = current.getSku();
            pw.println(brand + "," + model + "," + action + "," + weight + "," + type + "," + price + "," + sku);//print each rod
        }
        pw.close();//close printwriter
    }

    /**
     * Rewrite the reel file
     *
     * @param pw the PrintWriter to use
     */
    public static void rewriteReel(PrintWriter pw) {
        for (reel current : reelCatalogue) {//go through each reel
            String brand = current.getBrand();
            String model = current.getModel();
            String retrieve = current.getRetrieve();
            double gearRatio = current.getGearRatio();
            String type = current.getType();
            double price = current.getPrice();
            String sku = current.getSku();
            pw.println(brand + "," + model + "," + retrieve + "," + gearRatio + "," + type + "," + price + "," + sku);//print each reel
        }
        pw.close();//close printwriter
    }

    /**
     * Rewrite the lure file
     *
     * @param pw the PrintWriter to use
     */
    public static void rewriteLure(PrintWriter pw) {
        for (lure current : lureCatalogue) {//go through each lure
            String brand = current.getBrand();
            String model = current.getModel();
            String colour = current.getColour();
            double size = current.getSize();
            String type = current.getType();
            double price = current.getPrice();
            String sku = current.getSku();
            pw.println(brand + "," + model + "," + colour + "," + size + "," + type + "," + price + "," + sku);//print each lure
        }
        pw.close();//close printwriter
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.ButtonGroup btgAddItems;
    private static javax.swing.ButtonGroup btgDeleteItems;
    private javax.swing.ButtonGroup btgUpdateItems;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnAddItems;
    private javax.swing.JButton btnAddReturnMenu;
    private javax.swing.JButton btnBrandSortUpDelete;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnDeleteReturnMenu;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnModelSortDownUpdate;
    private javax.swing.JButton btnModelSortUpDelete;
    private javax.swing.JButton btnModelSortUpUpdate;
    private javax.swing.JButton btnReturnToMenu;
    private javax.swing.JButton btnSortBrandDownUpdate;
    private javax.swing.JButton btnSortBrandUpUpdate;
    private javax.swing.JButton btnSortDownBrandDelete;
    private javax.swing.JButton btnSortDownModelDelete;
    private javax.swing.JButton btnSortDownPriceDelete;
    private javax.swing.JButton btnSortPriceDownUpdate;
    private javax.swing.JButton btnSortPriceUpUpdate;
    private javax.swing.JButton btnSortUpPriceDelete;
    private javax.swing.JButton btnUpdateItem;
    private javax.swing.JButton btnUpdateTheItem;
    private javax.swing.JDialog dlgAddAnItem;
    private javax.swing.JDialog dlgDeleteItems;
    private javax.swing.JDialog dlgUpdateSelection;
    private javax.swing.JDialog dlgUpdateTheItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAddAction;
    private javax.swing.JLabel lblAddBrand;
    private javax.swing.JLabel lblAddError;
    private javax.swing.JLabel lblAddModel;
    private javax.swing.JLabel lblAddPrice;
    private javax.swing.JLabel lblAddSKU;
    private javax.swing.JLabel lblAddType;
    private javax.swing.JLabel lblAddWeight;
    private javax.swing.JLabel lblErrorAdd;
    private javax.swing.JLabel lblUpdateAction;
    private javax.swing.JLabel lblUpdateBrand;
    private javax.swing.JLabel lblUpdateError;
    private javax.swing.JLabel lblUpdateModel;
    private javax.swing.JLabel lblUpdatePrice;
    private javax.swing.JLabel lblUpdateSKU;
    private javax.swing.JLabel lblUpdateType;
    private javax.swing.JLabel lblUpdateWeight;
    private static javax.swing.JList lstDeleteItems;
    private javax.swing.JList lstUpdateItems;
    private javax.swing.JRadioButton radAddLure;
    private javax.swing.JRadioButton radAddReel;
    private javax.swing.JRadioButton radAddRod;
    private static javax.swing.JRadioButton radDeleteLure;
    private static javax.swing.JRadioButton radDeleteReel;
    private static javax.swing.JRadioButton radDeleteRod;
    private javax.swing.JRadioButton radUpdateLure;
    private javax.swing.JRadioButton radUpdateReel;
    private javax.swing.JRadioButton radUpdateRod;
    private javax.swing.JTextField txtAddAction;
    private javax.swing.JTextField txtAddBrand;
    private javax.swing.JTextField txtAddModel;
    private javax.swing.JTextField txtAddPrice;
    private javax.swing.JTextField txtAddSKU;
    private javax.swing.JTextField txtAddType;
    private javax.swing.JTextField txtAddWeight;
    private javax.swing.JTextField txtUpdateAction;
    private javax.swing.JTextField txtUpdateBrand;
    private javax.swing.JTextField txtUpdateModel;
    private javax.swing.JTextField txtUpdatePrice;
    private javax.swing.JTextField txtUpdateSKU;
    private javax.swing.JTextField txtUpdateType;
    private javax.swing.JTextField txtUpdateWeight;
    // End of variables declaration//GEN-END:variables
}
